from flask import Flask, request, jsonify
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ===================== HELPERS =====================

def bubbles(*msgs, delay_ms=500):
    """
    Converte uma tupla de strings em uma lista de replies com delays.
    - O primeiro bal√£o sai sem delay; os demais saem com delay_ms (0.5s).
    """
    replies = []
    for i, txt in enumerate(msgs):
        replies.append({"message": txt, "delay": 0 if i == 0 else delay_ms})
    return replies

def reply_list(*blocks):
    """
    Achata listas de replies (cada block pode ser uma lista de replies).
    """
    out = []
    for blk in blocks:
        out.extend(blk)
    return out

# ===================== CONSTANTES / TEXTOS =====================

CODIGOS_TESTE = {"224", "555", "91", "88", "871", "98", "94"}

KEY_OK = {"deu certo", "acessou", "funcionou", "sim", "consegui", "tudo certo", "abriu", "logou"}
KEY_NOK = {"n√£o", "nao", "n consegui", "n√£o funcionou", "nao funcionou", "n deu certo", "nao deu certo", "n√£o deu certo"}
KEY_OUTRO = {"tem outro", "quero outro", "outro app", "tem mais algum", "tem mais uma op√ß√£o", "tem mais op√ß√µes"}
KEY_ANDROID = {"android", "tv box", "projetor", "celular android", "celular", "philips"}
KEY_XCLOUD_DEV = {"samsung", "lg", "roku", "philco nova", "xcloud"}
KEY_PC = {"pc", "computador", "notebook", "windows", "macbook"}

# pedidos de link/relatos de dificuldade em loja
KEY_LINK_ALT = {
    "n√£o consigo baixar", "nao consigo baixar", "n√£o acho na loja", "nao acho na loja",
    "n√£o encontra na loja", "nao encontra na loja", "n√£o tem na loja", "nao tem na loja",
    "tem link", "manda o link", "baixar por link", "link alternativo", "apk",
    "aptoide", "ntdown", "downloader", "n√£o achei", "nao achei"
}

KEY_PAG = {"pix", "pagamento", "valor", "quanto", "plano", "planos", "pre√ßo", "preco"}

KEY_FOTO = {"foto", "imagem", "print", "qrcode", "qr code", "qr-code", "qr", "mac:", "endere√ßo mac", "endereco mac", "mostrei a tela"}

MSG_BEM_VINDO = (
    "Ol√°! üëã Seja bem-vindo! Aqui voc√™ tem acesso a *canais de TV, filmes e s√©ries*. üì∫üçø\n"
    "Vamos come√ßar seu teste gratuito?\n\n"
    "Me diga qual aparelho voc√™ quer usar (ex: TV LG, Roku, Celular, Computador...)."
)

# ---------- ANDROID (inclui PHILIPS) ----------
ANDROID_MAIN = [
    "üì± Para Android, recomendo o *Xtream IPTV Player* *(preferencial)*.",
    "Se quiser alternativas, temos: *9Xtream*, *XCIPTV* e *IPTV Stream Player*.",
    "Depois de instalar, me avise para eu enviar seu login. üòâ",
    "Se n√£o encontrar na loja, me fale que eu te ensino outras formas."
]

ANDROID_ALTS = [
    "‚úÖ *OUTROS APLICATIVOS QUE VOC√ä TAMB√âM PODE USAR* ‚¨áÔ∏è",
    "‚Ä¢ *9Xtream*\n‚Ä¢ *XCIPTV*\n‚Ä¢ *IPTV Stream Player*",
    "Instale um deles e me avise para eu enviar seu login. üì≤"
]

ANDROID_ENSINO_LOJA = [
    "üõ†Ô∏è Vamos tentar pela loja:",
    "1) Abra a *Play Store*.\n2) Busque por *Xtream IPTV Player*.\n3) Toque em *Instalar*.",
    "Se n√£o aparecer, busque por: *9Xtream*, *XCIPTV* ou *IPTV Stream Player*.",
    "Conseguiu? Me avise aqui. üòä"
]

ANDROID_LINK = [
    "üîî *A√á√ÉO MANUAL NECESS√ÅRIA*",
    "Como voc√™ n√£o achou na loja, tente pelo *link direto* no navegador/Downloader/NTDOWN:",
    "üëâ http://xwkhb.info/axc",
    "Digite esse endere√ßo e toque *Enter* ‚Äî o download come√ßa sozinho. Depois que abrir o app, me avise para eu enviar seu login. ‚è≥"
]

ANDROID_FOTO_FALLBACK = [
    "üîî *A√á√ÉO MANUAL NECESS√ÅRIA*",
    "Recebi uma imagem durante o fluxo *Android*. Vou verificar e te retorno.",
    "Enquanto isso, me diga: conseguiu instalar *Xtream IPTV Player*, *9Xtream*, *XCIPTV* ou *IPTV Stream Player*?"
]

# ---------- XCLOUD (TVs Samsung/LG/Roku/Philco nova) ----------
XCLOUD_MAIN = [
    "üì∫ *TV compat√≠vel com Xcloud* detectada!",
    "Use o *Xcloud (√≠cone verde e preto)* üü©‚¨õ *(preferencial)*.",
    "Instale e me avise para eu enviar seu login.",
    "üïí O teste gratuito dura *3 horas*."
]

XCLOUD_ALTS = [
    "Se preferir, alternativas na sua TV:",
    "‚Ä¢ *OTT Player*\n‚Ä¢ *Duplecast*\n‚Ä¢ *SmartOne*",
    "Instale e me diga qual app escolheu pra eu te guiar certinho. üòâ"
]

# ---------- PC ----------
PC_MAIN = [
    "üñ•Ô∏è Para PC/Windows, baixe o app por este link:",
    "https://7aps.online/iptvsmarters",
    "Depois me avise quando abrir o link para que eu possa enviar o seu login. ‚ò∫Ô∏è"
]

# ---------- P√≥s-login ----------
POS_OK = ["Perfeito! Aproveite seu teste. üòä"]

POS_NOK = [
    "Vamos resolver isso!",
    "Confira se digitou *exatamente* como enviado.",
    "Aten√ß√£o √†s *letras mai√∫sculas e min√∫sculas* e caracteres parecidos: *I* (i mai√∫sculo) √ó *l* (L min√∫sculo), *O* (letra) √ó *0* (zero).",
    "Pode me enviar uma *foto da tela* mostrando como voc√™ est√° digitando? üì∑"
]

# ---------- Fluxos espec√≠ficos ----------
DUPLECAST_PASSO = [
    "Certo! No *Duplecast*, siga:",
    "Start ‚ûú Portugu√™s ‚ûú Brasil ‚ûú Fuso hor√°rio *-03* ‚ûú *Minha duplecast*.",
    "Depois, envie uma *foto do QR code* de perto.",
    "Em seguida, digite **871** aqui na conversa para eu gerar o teste (link M3U)."
]

DUPLECAST_JA_TEM = [
    "Perfeito! Se voc√™ *j√° tem* o Duplecast:",
    "Envie uma *foto do QR code* de perto e depois digite **871** aqui na conversa."
]

SMARTONE = [
    "No *SmartOne*, me envie o **MAC** (ou uma *foto da tela com o MAC*).",
    "Depois disso, digite **871** aqui para eu gerar o teste."
]

OTTPLAYER = [
    "No *OTT Player*, me envie uma *foto do QR code* de perto.",
    "Em seguida, digite **871** aqui para eu gerar o teste."
]

FOTO_QUAL_APP = [
    "Entendi a foto/QR/MAC!",
    "Como n√£o consigo identificar imagens aqui, me diga por favor *qual aplicativo* voc√™ est√° usando:",
    "‚Ä¢ Duplecast\n‚Ä¢ SmartOne\n‚Ä¢ OTT Player\n‚Ä¢ Xcloud (√≠cone verde e preto)\n‚Ä¢ Xtream IPTV Player\n‚Ä¢ 9Xtream\n‚Ä¢ XCIPTV\n‚Ä¢ IPTV Stream Player"
]

# ---------- Planos / pagamento ----------
VALORES = [
    "üí∞ *Planos dispon√≠veis*:",
    "1 m√™s ‚Äì R$ 26,00 | 2 meses ‚Äì R$ 47,00 | 3 meses ‚Äì R$ 68,00 | 6 meses ‚Äì R$ 129,00 | 1 ano ‚Äì R$ 185,00"
]

PAGAMENTO = [
    "üí≥ *Formas de pagamento*: Pix ou Cart√£o.",
    "Cart√£o (link seguro): https://mpago.la/2Nsh3Fq",
    "Vou te mandar o *Pix (CNPJ)* em uma mensagem separada para facilitar a c√≥pia."
]

PIX_SOZINHO = ["Pix (CNPJ): 46.370.366/0001-97"]

AUDIO_MSG = [
    "Ops! üòÖ Por aqui eu n√£o consigo interpretar *√°udios*.",
    "Pode me mandar por *texto*? Eu continuo te ajudando normalmente!"
]

# ===================== SESS√ÉO POR CONTATO =====================

sessions = {}  # numero -> {"msgs": [...], "ctx": None}

# ===================== APP =====================

@app.route("/", methods=["POST"])
def responder():
    data = request.get_json()
    query = data.get("query", {})
    numero = query.get("sender", "").strip()
    mensagem = query.get("message", "").strip()
    m = mensagem.lower()

    if not numero or not mensagem:
        return jsonify({"replies": [{"message": "‚ö†Ô∏è Mensagem inv√°lida recebida."}]})

    # Inicia sess√£o
    if numero not in sessions:
        sessions[numero] = {"msgs": [], "ctx": None}
        return jsonify({"replies": bubbles(MSG_BEM_VINDO)})

    s = sessions[numero]
    s["msgs"].append(f"Cliente: {m}")
    contexto = "\n".join(s["msgs"][-15:])

    # ---------- P√≥s-login ----------
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_OK):
        return jsonify({"replies": bubbles(*POS_OK)})

    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_NOK):
        return jsonify({"replies": bubbles(*POS_NOK)})

    # ---------- √Åudio ----------
    if "√°udio" in m or "audio" in m:
        return jsonify({"replies": bubbles(*AUDIO_MSG)})

    # ---------- Imagem/QR/MAC ----------
    if any(k in m for k in KEY_FOTO):
        if s["ctx"] == "android":
            return jsonify({"replies": bubbles(*ANDROID_FOTO_FALLBACK)})
        else:
            return jsonify({"replies": bubbles(*FOTO_QUAL_APP)})

    # ---------- ‚ÄúTem outro?‚Äù ----------
    if any(phrase in m for phrase in KEY_OUTRO):
        if s["ctx"] == "android":
            return jsonify({"replies": bubbles(*ANDROID_ALTS)})
        elif s["ctx"] == "xcloud":
            return jsonify({"replies": reply_list(bubbles(*XCLOUD_ALTS))})
        else:
            msg = "Me diga o modelo do aparelho (Android, Samsung/LG/Roku, iPhone ou PC) e te passo as op√ß√µes certinhas. üòâ"
            return jsonify({"replies": bubbles(msg)})

    # ===================== FLUXOS DETERMIN√çSTICOS =====================

    # ANDROID (inclui Philips)
    if any(word in m for word in KEY_ANDROID):
        s["ctx"] = "android"
        return jsonify({"replies": bubbles(*ANDROID_MAIN)})

    # Dificuldade na loja / pedido de link
    if any(f in m for f in KEY_LINK_ALT):
        # s√≥ libera link se o contexto j√° √© android ou a frase menciona android/tv box
        if s["ctx"] == "android" or any(w in m for w in KEY_ANDROID):
            # Tente insistir mais um pouco ensinando a loja, depois libera link
            return jsonify({"replies": reply_list(bubbles(*ANDROID_ENSINO_LOJA), bubbles(*ANDROID_LINK))})
        else:
            return jsonify({"replies": bubbles("O link direto √© para *Android*. Seu aparelho √© Android? Se for, te passo agora. üòâ")})

    # XCLOUD (Samsung/LG/Roku/Philco nova)
    if any(word in m for word in KEY_XCLOUD_DEV):
        s["ctx"] = "xcloud"
        return jsonify({"replies": reply_list(bubbles(*XCLOUD_MAIN), bubbles(*XCLOUD_ALTS))})

    # PC / Windows
    if any(p in m for p in KEY_PC):
        s["ctx"] = "pc"
        return jsonify({"replies": bubbles(*PC_MAIN)})

    # Menciona explicitamente os apps
    if "duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": bubbles(*DUPLECAST_PASSO)})
    if "j√° tenho duplecast" in m or "ja tenho duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": bubbles(*DUPLECAST_JA_TEM)})
    if "smartone" in m or "smart one" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": bubbles(*SMARTONE)})
    if "ott player" in m or "ottplayer" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": bubbles(*OTTPLAYER)})

    # Cliente digitou algum c√≥digo de teste
    if m.strip() in CODIGOS_TESTE:
        return jsonify({"replies": bubbles("üîì Gerando seu login de teste, s√≥ um instante...")})

    # Planos / Pagamento
    if any(k in m for k in KEY_PAG):
        return jsonify({"replies": reply_list(bubbles(*VALORES), bubbles(*PAGAMENTO), bubbles(*PIX_SOZINHO))})

    # ===================== FALLBACK COM IA =====================
    prompt = (
        "Voc√™ √© um atendente de IPTV no WhatsApp. "
        "Responda curto, objetivo, com emojis, e nunca recomende apps fora desta lista: "
        "Xtream IPTV Player, 9Xtream, XCIPTV, IPTV Stream Player, "
        "Xcloud (√≠cone verde e preto), OTT Player, Duplecast, SmartOne, "
        "Smarters Player Lite (iOS) e IPTV Smarters para PC. "
        "Teste gratuito sempre 3 horas. Se falar de valores, envie os planos e depois Pix em mensagem separada. "
        "Se o cliente enviar foto/QR/MAC e o contexto for Android, diga 'üîî A√á√ÉO MANUAL NECESS√ÅRIA' e pe√ßa para aguardar; "
        "caso contr√°rio, pergunte qual aplicativo ele usa. "
        "Para Android, enfatize Xtream IPTV Player e alternativas (9Xtream, XCIPTV, IPTV Stream Player). "
        "Se n√£o encontrar na loja, ensine a procurar e s√≥ ent√£o ofere√ßa o link http://xwkhb.info/axc.\n\n"
        f"Hist√≥rico recente:\n{contexto}\n\n"
        f"Mensagem do cliente: '{mensagem}'\n"
        "Responda em 2‚Äì4 frases curtas."
    )

    try:
        result = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4
        )
        texto = result.choices[0].message.content.strip()
        return jsonify({"replies": bubbles(texto)})
    except Exception as e:
        return jsonify({"replies": bubbles(f"‚ö†Ô∏è Erro ao gerar resposta: {str(e)}")})

# ===================== RUN =====================

if __name__ == "__main__":
    # Porta 10000 para compatibilidade com seu Render
    app.run(host="0.0.0.0", port=10000)
