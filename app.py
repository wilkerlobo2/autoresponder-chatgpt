from flask import Flask, request, jsonify
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ===================== CONSTANTES / MENSAGENS =====================

MSG_BEM_VINDO = (
    "Ol√°! üëã Seja bem-vindo! Aqui voc√™ tem acesso a *canais de TV, filmes e s√©ries*. üì∫üçø\n"
    "Vamos come√ßar seu teste gratuito?\n\n"
    "Me diga qual aparelho voc√™ quer usar (ex: TV LG, Roku, Celular, Computador...)."
)

# Android (inclui Philips)
MSG_ANDROID = (
    "üì± Para Android, recomendo o *Xtream IPTV Player* (preferencial). üì∫üëáüì≤\n"
    "Se preferir, pode usar tamb√©m: *9Xtream*, *XCIPTV* ou *IPTV Stream Player*.\n"
    "Me avise quando instalar para eu enviar seu login."
)
MSG_ANDROID_ALTERNATIVAS = (
    "Op√ß√µes para Android: *Xtream IPTV Player* (preferencial), *9Xtream*, *XCIPTV* ou *IPTV Stream Player*. üòâ"
)
MSG_ANDROID_LINK = (
    "üîî *A√á√ÉO MANUAL NECESS√ÅRIA*\n"
    "Se n√£o conseguiu/ n√£o quer instalar pelas lojas, d√° pra baixar direto pelo navegador, Downloader ou NTDOWN.\n"
    "Digite no navegador e aperte Enter: **http://xwkhb.info/axc**\n"
    "Quando o app abrir, me avise para eu enviar seu login. ‚è≥"
)

# Xcloud (verde e preto)
MSG_XCLOUD = (
    "üì∫ Para sua TV, use o *Xcloud (√≠cone verde e preto)* ‚Äî preferencial.\n"
    "Alternativas: *OTT Player*, *Duplecast* ou *SmartOne*.\n"
    "Me avise quando instalar para eu enviar seu login. ‚è±Ô∏è Teste gratuito: *3 horas*."
)
MSG_XCLOUD_ALTERNATIVAS = (
    "Alternativas ao *Xcloud (√≠cone verde e preto)*: *OTT Player*, *Duplecast* ou *SmartOne*. üì∫"
)

# PC / Windows
MSG_PC = (
    "üñ•Ô∏è Para PC/Windows, baixe o app por este link:\n"
    "https://7aps.online/iptvsmarters\n\n"
    "Depois me avise quando abrir o link para que eu possa enviar o seu login. ‚ò∫Ô∏è"
)

# P√≥s‚Äëlogin
MSG_POS_LOGIN_OK = "Perfeito! Aproveite seu teste. üòä"
MSG_POS_LOGIN_FALHOU = (
    "Vamos resolver! Confira se digitou *exatamente* como enviado.\n"
    "Aten√ß√£o √†s *letras mai√∫sculas/min√∫sculas* e aos parecidos: *I (i mai√∫sculo)* vs *l (L min√∫sculo)*, *O* vs *0*.\n"
    "Pode me enviar uma *foto da tela* mostrando como voc√™ est√° digitando? üì∑"
)

# Foto/QR/MAC
MSG_FOTO_PERGUNTA_APP = (
    "Entendi a foto/QR/MAC! Como n√£o consigo identificar imagens aqui, me diga **qual aplicativo** voc√™ est√° usando:\n"
    "*Duplecast*, *SmartOne*, *OTT Player*, *Xcloud (√≠cone verde e preto)*, *Xtream IPTV Player*, *9Xtream*, *XCIPTV* ou *IPTV Stream Player*? üòâ"
)

# Fluxos espec√≠ficos
MSG_DUBLECAST_PASSO = (
    "No *Duplecast*, siga: Start ‚ûú Portugu√™s ‚ûú Brasil ‚ûú Fuso hor√°rio *-03* ‚ûú *Minha duplecast*.\n"
    "Depois envie uma *foto do QR code* de perto e digite **871** aqui na conversa (eu gero o teste via link M3U)."
)
MSG_DUBLECAST_JA_TEM = (
    "Se voc√™ *j√° tem* o Duplecast: envie a *foto do QR code* de perto e depois digite **871** aqui na conversa. üòâ"
)
MSG_SMARTONE = (
    "No *SmartOne*, me envie o **MAC** (ou *foto da tela com o MAC*). Depois digite **871** para eu gerar o teste."
)
MSG_OTTPLAYER = (
    "No *OTT Player*, me envie uma *foto do QR code* de perto. Em seguida, digite **871** para eu gerar o teste."
)

# Planos / pagamento
MSG_VALORES = (
    "üí∞ *Planos dispon√≠veis*:\n"
    "1 m√™s ‚Äì R$ 26,00 | 2 meses ‚Äì R$ 47,00 | 3 meses ‚Äì R$ 68,00 | 6 meses ‚Äì R$ 129,00 | 1 ano ‚Äì R$ 185,00"
)
MSG_PAGAMENTO = (
    "üí≥ *Formas de pagamento*: Pix ou Cart√£o.\n"
    "Cart√£o (link seguro): https://mpago.la/2Nsh3Fq\n"
    "Vou te mandar o *Pix (CNPJ)* em uma mensagem separada para facilitar a c√≥pia."
)
MSG_PIX_SOZINHO = "Pix (CNPJ): 46.370.366/0001-97"

MSG_AUDIO = "Ops! üòÖ N√£o consigo interpretar *√°udios*. Pode me mandar por *texto*? Continuo te ajudando!"

MSG_FLAG_MANUAL = "üîî *A√á√ÉO MANUAL NECESS√ÅRIA*: analisar e enviar login/dados quando o cliente confirmar."

# Dicion√°rios de palavras‚Äëchave
CODIGOS_TESTE = {"224", "555", "91", "88", "871", "98", "94"}
KEY_OK = {"deu certo", "acessou", "funcionou", "sim", "consegui", "tudo certo", "abriu", "logou"}
KEY_NOK = {"n√£o", "nao", "n consegui", "n√£o funcionou", "nao funcionou", "n deu certo", "nao deu certo", "n√£o deu certo"}
KEY_FOTO = {"foto", "qrcode", "qr code", "qr-code", "qr", "mac:", "endere√ßo mac", "endereco mac", "mostrei a tela"}
KEY_ANDROID = {"android", "tv box", "projetor", "celular android", "celular", "philips"}  # Philips = Android
KEY_XCLOUD_DEVICES = {"samsung", "lg", "roku", "philco nova", "xcloud"}
KEY_PC = {"pc", "computador", "notebook", "windows", "macbook"}
KEY_LINK_ALT = {
    "n√£o consigo baixar", "nao consigo baixar", "n√£o acho na loja", "nao acho na loja",
    "n√£o encontra na loja", "nao encontra na loja", "n√£o tem na loja", "nao tem na loja",
    "tem link", "manda o link", "baixar por link", "link alternativo", "apk", "aptoide", "ntdown", "downloader"
}
KEY_PAG = {"pix", "pagamento", "valor", "quanto", "plano", "planos", "pre√ßo", "preco"}
KEY_OUTRO = {
    "tem outro", "tem mais algum", "quero outro", "outro app", "tem mais uma op√ß√£o",
    "tem mais op√ß√µes", "n√£o tem esse", "nao tem esse", "n√£o tem esse.", "nao tem esse."
}

# Sess√µes por cliente: hist√≥rico e contexto (android / xcloud / pc)
sessions = {}  # numero -> {"msgs": [..], "ctx": None}


# ===================== APP =====================

@app.route("/", methods=["POST"])
def responder():
    data = request.get_json()
    query = data.get("query", {})
    numero = (query.get("sender") or "").strip()
    mensagem = (query.get("message") or "").strip()
    m = mensagem.lower()

    if not numero or not mensagem:
        return jsonify({"replies": [{"message": "‚ö†Ô∏è Mensagem inv√°lida recebida."}]})

    # Cria sess√£o e boas‚Äëvindas
    if numero not in sessions:
        sessions[numero] = {"msgs": [], "ctx": None}
        return jsonify({"replies": [{"message": MSG_BEM_VINDO}]})

    # Hist√≥rico curto
    s = sessions[numero]
    s["msgs"].append(f"Cliente: {m}")
    contexto = "\n".join(s["msgs"][-15:])

    # ---------------- P√≥s‚Äëlogin ----------------
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_OK):
        return jsonify({"replies": [{"message": MSG_POS_LOGIN_OK}]})

    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_NOK):
        return jsonify({"replies": [{"message": MSG_POS_LOGIN_FALHOU}]})

    # ---------------- Foto/QR/MAC ----------------
    if any(k in m for k in KEY_FOTO):
        return jsonify({"replies": [{"message": MSG_FOTO_PERGUNTA_APP}]})

    # ---------------- √Åudio ----------------
    if "√°udio" in m or "audio" in m:
        return jsonify({"replies": [{"message": MSG_AUDIO}]})

    # ---------------- ‚ÄúTem outro?‚Äù respeitando contexto ----------------
    if any(phrase in m for phrase in KEY_OUTRO):
        if s["ctx"] == "android":
            return jsonify({"replies": [{"message": MSG_ANDROID_ALTERNATIVAS}]})
        elif s["ctx"] == "xcloud":
            return jsonify({"replies": [{"message": MSG_XCLOUD_ALTERNATIVAS}]})
        else:
            return jsonify({"replies": [{"message": "Me diga o aparelho (Android, Samsung/LG/Roku, iPhone ou PC) que te mostro as op√ß√µes certinhas. üòâ"}]})

    # ===================== RESPOSTAS DETERMIN√çSTICAS =====================

    # Android (define contexto)
    if any(word in m for word in KEY_ANDROID):
        s["ctx"] = "android"
        return jsonify({"replies": [{"message": MSG_ANDROID}]})

    # Precisa de link alternativo (apenas se j√° estiver em contexto Android ou a frase citar Android)
    if any(f in m for f in KEY_LINK_ALT):
        if s["ctx"] == "android" or any(w in m for w in ("android", "tv box", "philips", "celular")):
            return jsonify({"replies": [{"message": MSG_ANDROID_LINK}, {"message": MSG_FLAG_MANUAL}]})
        else:
            return jsonify({"replies": [{"message": "O link alternativo √© para *Android*. Seu aparelho √© Android? Se for, te passo agora. üòâ"}]})

    # Dispositivos com Xcloud (define contexto)
    if any(word in m for word in KEY_XCLOUD_DEVICES):
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_XCLOUD}]})

    # PC / Windows (define contexto)
    if any(p in m for p in KEY_PC):
        s["ctx"] = "pc"
        return jsonify({"replies": [{"message": MSG_PC}]})

    # Apps mencionados explicitamente
    if "duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_DUBLECAST_PASSO}]})
    if "j√° tenho duplecast" in m or "ja tenho duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_DUBLECAST_JA_TEM}]})
    if "smartone" in m or "smart one" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_SMARTONE}]})
    if "ott player" in m or "ottplayer" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_OTTPLAYER}]})

    # Cliente digitou c√≥digo de teste (quem envia login √© o AutoResponder)
    if m.strip() in CODIGOS_TESTE:
        return jsonify({"replies": [{"message": "üîì Gerando seu login de teste, s√≥ um instante..."}]})

    # Planos + pagamento + Pix separado
    if any(k in m for k in KEY_PAG):
        return jsonify({"replies": [
            {"message": MSG_VALORES},
            {"message": MSG_PAGAMENTO},
            {"message": MSG_PIX_SOZINHO}
        ]})

    # ===================== FALLBACK COM IA (casos gerais) =====================
    prompt = (
        "Voc√™ √© um atendente de IPTV no WhatsApp. Responda curto, objetivo e educado.\n"
        "Nunca recomende apps fora desta lista: Xtream IPTV Player, 9Xtream, XCIPTV, IPTV Stream Player, "
        "Xcloud (√≠cone verde e preto), OTT Player, Duplecast, SmartOne, Smarters Player Lite (iOS) e IPTV Smarters (PC).\n"
        "Teste gratuito sempre *3 horas*. Ao falar de valores, envie planos + Pix em mensagem separada.\n"
        "Se o cliente enviar foto/QR/MAC, diga que n√£o identifica imagens e pergunte qual app est√° usando.\n"
        "Se pedir link alternativo para Android, use exatamente: http://xwkhb.info/axc e a frase 'üîî A√á√ÉO MANUAL NECESS√ÅRIA'.\n"
        f"Hist√≥rico recente:\n{contexto}\n\nMensagem do cliente: '{mensagem}'\nResponda seguindo estritamente as regras."
    )

    try:
        result = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4
        )
        texto = result.choices[0].message.content.strip()
        return jsonify({"replies": [{"message": texto}]})
    except Exception as e:
        return jsonify({"replies": [{"message": f"‚ö†Ô∏è Erro ao gerar resposta: {str(e)}"}]})

# =======================================================================

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
