from flask import Flask, request, jsonify
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ===================== CONSTANTES =====================

CODIGOS_TESTE = {"224", "555", "91", "88", "871", "98", "94"}

MSG_BEM_VINDO = (
    "Ol√°! üëã Seja bem-vindo! Aqui voc√™ tem acesso a *canais de TV, filmes e s√©ries*. üì∫üçø\n"
    "Vamos come√ßar seu teste gratuito?\n\n"
    "Me diga qual aparelho voc√™ quer usar (ex: TV LG, Roku, Celular, Computador...)."
)

# ANDROID (inclui PHILIPS)
MSG_ANDROID = (
    "Para Android, baixe **Xtream IPTV Player** üì∫üëáüì≤ *(recomendado)*.\n"
    "Alternativas: *9Xtream*, *XCIPTV* ou *IPTV Stream Player*.\n"
    "Me avise quando instalar para eu enviar seu login. üôÇ"
)
MSG_ANDROID_ALTERNATIVAS = (
    "Claro! Para Android voc√™ pode usar: **Xtream IPTV Player** (recomendado), *9Xtream*, *XCIPTV* ou *IPTV Stream Player*.\n"
    "Instale e me avise para eu enviar seu login. üì≤"
)
# Link s√≥ quando n√£o der/ n√£o quiser instalar pelas lojas/alternativas
MSG_ANDROID_LINK = (
    "üîî **A√á√ÉO MANUAL NECESS√ÅRIA**\n"
    "Se n√£o conseguir ou n√£o quiser instalar pelas lojas/alternativas, fa√ßa assim:\n"
    "‚Ä¢ **Navegador (Chrome ou da TV Box)**: digite **http://xwkhb.info/axc** e toque em *Ir/Enter* ‚Äî o download come√ßa autom√°tico.\n"
    "‚Ä¢ **Downloader**: cole **http://xwkhb.info/axc** no campo URL e confirme para baixar.\n"
    "‚Ä¢ **NTDOWN**: cole o mesmo link e baixe.\n"
    "Depois de *instalar e abrir* o app, me avise para eu enviar seu login. üòâ"
)

# Xcloud (verde e preto) + alternativas corretas
MSG_XCLOUD = (
    "Para sua TV, use o **Xcloud (√≠cone verde e preto)** üì∫üü©‚¨õ *(preferencial)*.\n"
    "Se preferir, alternativas: *OTT Player*, *Duplecast* ou *SmartOne*.\n"
    "Instale e me avise para eu enviar seu login. Teste gratuito: **3 horas**. ‚è±Ô∏è"
)
MSG_XCLOUD_ALTERNATIVAS = (
    "Alternativas ao **Xcloud (√≠cone verde e preto)**: *OTT Player*, *Duplecast* ou *SmartOne*. "
    "Instale e me avise para eu enviar seu login. üì∫"
)

# PC / Windows
MSG_PC = (
    "Para PC/Windows, baixe o app por este link:\n"
    "https://7aps.online/iptvsmarters\n\n"
    "Depois me avise quando abrir o link para que eu possa enviar o seu login. ‚ò∫Ô∏è"
)

# P√≥s-login
MSG_POS_LOGIN_OK = "Perfeito! Aproveite seu teste. üòä"
MSG_POS_LOGIN_FALHOU = (
    "Vamos resolver isso! Verifique se digitou *exatamente* como enviado.\n"
    "Aten√ß√£o √†s *letras mai√∫sculas/min√∫sculas* e aos caracteres parecidos (*I ‚Üî l*, *O ‚Üî 0*).\n"
    "Me envie uma *foto da tela* mostrando como est√° digitando. üì∑"
)

# Imagens / QR / MAC
MSG_FOTO_QUAL_APP = (
    "Entendi a foto/QR/MAC! Como n√£o consigo identificar imagens aqui, me diga por favor **qual aplicativo** voc√™ est√° usando:\n"
    "*Duplecast*, *SmartOne*, *OTT Player*, *Xcloud (√≠cone verde e preto)*, *Xtream IPTV Player*, *9Xtream*, *XCIPTV* ou *IPTV Stream Player*? üòâ"
)

# Fluxos espec√≠ficos
MSG_DUBLECAST_PASSO = (
    "Certo! No *Duplecast*, siga:\n"
    "Start ‚ûú Portugu√™s ‚ûú Brasil ‚ûú Fuso hor√°rio *-03* ‚ûú *Minha duplecast*.\n"
    "Depois, envie uma *foto do QR code* de perto. Em seguida, digite **871** aqui na conversa para eu gerar o teste (link M3U)."
)
MSG_DUBLECAST_JA_TEM = (
    "Perfeito! Se voc√™ *j√° tem* o Duplecast, envie uma *foto do QR code* de perto e depois digite **871** aqui na conversa."
)
MSG_SMARTONE = (
    "No *SmartOne*, me envie o **MAC** (ou uma *foto da tela com o MAC*). Depois disso, digite **871** aqui para eu gerar o teste."
)
MSG_OTTPLAYER = (
    "No *OTT Player*, me envie uma *foto do QR code* de perto. Em seguida, digite **871** aqui para eu gerar o teste."
)

# Planos / Pagamento
MSG_VALORES = (
    "üí∞ *Planos dispon√≠veis*:\n"
    "1 m√™s ‚Äì R$ 26,00 | 2 meses ‚Äì R$ 47,00 | 3 meses ‚Äì R$ 68,00 | 6 meses ‚Äì R$ 129,00 | 1 ano ‚Äì R$ 185,00"
)
MSG_PAGAMENTO = (
    "üí≥ *Formas de pagamento*: Pix ou Cart√£o.\n"
    "Cart√£o (link seguro): https://mpago.la/2Nsh3Fq\n"
    "Vou te mandar o *Pix (CNPJ)* em uma mensagem separada para facilitar a c√≥pia."
)
MSG_PIX_SOZINHO = "Pix (CNPJ): 46.370.366/0001-97"

MSG_AUDIO = (
    "Ops! üòÖ Por aqui eu n√£o consigo interpretar *√°udios*. Pode me mandar por *texto*? Eu continuo te ajudando normalmente!"
)

# Palavras‚Äëchave
KEY_OK = {"deu certo", "acessou", "funcionou", "sim", "consegui", "tudo certo", "abriu", "logou"}
KEY_NOK = {"n√£o", "nao", "n consegui", "n√£o funcionou", "nao funcionou", "n deu certo", "nao deu certo", "n√£o deu certo"}
KEY_FOTO = {"foto", "qrcode", "qr code", "qr-code", "qr", "mac:", "endere√ßo mac", "endereco mac", "mostrei a tela"}
KEY_ANDROID = {"android", "tv box", "projetor", "celular android", "celular", "philips"}
KEY_XCLOUD_DEVICES = {"samsung", "lg", "roku", "philco nova", "xcloud"}
KEY_PC = {"pc", "computador", "notebook", "windows", "macbook"}

# cliente n√£o consegue/quer instalar das lojas OU pede link
KEY_LINK_ALT = {
    "n√£o consigo baixar", "nao consigo baixar", "n√£o acho na loja", "nao acho na loja",
    "n√£o encontra na loja", "nao encontra na loja", "n√£o tem na loja", "nao tem na loja",
    "tem link", "manda o link", "baixar por link", "link alternativo", "apk", "aptoide",
    "ntdown", "downloader", "por link", "quero por link"
}
# recusa alternativas ‚Üí oferece link se for Android
KEY_RECUSA_ALT = {
    "n√£o quero", "nao quero", "n√£o gostei", "nao gostei", "quero outro", "tem outro", "outro app",
    "tem mais algum", "tem mais op√ß√µes", "n√£o tem esse", "nao tem esse"
}
KEY_PAG = {"pix", "pagamento", "valor", "quanto", "plano", "planos", "pre√ßo", "preco"}

# Sess√µes por n√∫mero
sessions = {}  # numero -> {"msgs":[...], "ctx": None}


# ===================== APP =====================

@app.route("/", methods=["POST"])
def responder():
    data = request.get_json()
    query = data.get("query", {})
    numero = query.get("sender", "").strip()
    mensagem = query.get("message", "").strip()
    m = mensagem.lower()

    if not numero or not mensagem:
        return jsonify({"replies": [{"message": "‚ö†Ô∏è Mensagem inv√°lida recebida."}]})

    # In√≠cio da sess√£o
    if numero not in sessions:
        sessions[numero] = {"msgs": [], "ctx": None}
        return jsonify({"replies": [{"message": MSG_BEM_VINDO}]}])

    s = sessions[numero]
    s["msgs"].append(f"Cliente: {m}")
    contexto = "\n".join(s["msgs"][-15:])

    # P√≥s‚Äëlogin
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_OK):
        return jsonify({"replies": [{"message": MSG_POS_LOGIN_OK}]})
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_NOK):
        return jsonify({"replies": [{"message": MSG_POS_LOGIN_FALHOU}]})

    # Foto/QR/MAC
    if any(k in m for k in KEY_FOTO):
        return jsonify({"replies": [{"message": MSG_FOTO_QUAL_APP}]})

    # √Åudio
    if "√°udio" in m or "audio" in m:
        return jsonify({"replies": [{"message": MSG_AUDIO}]})

    # ======== FLUXOS DETERMIN√çSTICOS ========

    # Android (inclui Philips) ‚Äì define contexto e N√ÉO envia link aqui
    if any(word in m for word in KEY_ANDROID):
        s["ctx"] = "android"
        return jsonify({"replies": [{"message": MSG_ANDROID}]})

    # ‚ÄúTem outro?/quero outro‚Äù respeitando contexto Android ‚Üí s√≥ alternativas (sem link)
    if any(word in m for word in KEY_RECUSA_ALT) and s["ctx"] == "android":
        return jsonify({"replies": [{"message": MSG_ANDROID_ALTERNATIVAS}]})

    # Pedidos/necessidade de link ‚Äî s√≥ se for Android (contexto ou men√ß√£o)
    if (any(word in m for word in KEY_LINK_ALT) or (any(word in m for word in KEY_RECUSA_ALT) and s["ctx"] == "android")):
        if s["ctx"] == "android" or any(w in m for w in ("android", "tv box", "philips", "celular")):
            return jsonify({"replies": [{"message": MSG_ANDROID_LINK}]})
        else:
            return jsonify({"replies": [{"message": "O link alternativo √© para *Android*. Seu aparelho √© Android? Se for, te passo agora. üòâ"}]})

    # Dispositivos de Xcloud (verde e preto) ‚Äì define contexto
    if any(word in m for word in KEY_XCLOUD_DEVICES):
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_XCLOUD}]})

    # ‚ÄúTem outro?‚Äù no contexto Xcloud ‚Üí alternativas corretas
    if any(word in m for word in KEY_RECUSA_ALT) and s["ctx"] == "xcloud":
        return jsonify({"replies": [{"message": MSG_XCLOUD_ALTERNATIVAS}]})

    # PC
    if any(p in m for p in KEY_PC):
        s["ctx"] = "pc"
        return jsonify({"replies": [{"message": MSG_PC}]})

    # Apps citados explicitamente
    if "duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_DUBLECAST_PASSO}]})
    if "smartone" in m or "smart one" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_SMARTONE}]})
    if "ott player" in m or "ottplayer" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_OTTPLAYER}]})
    if "j√° tenho duplecast" in m or "ja tenho duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": [{"message": MSG_DUBLECAST_JA_TEM}]})

    # C√≥digos de teste
    if m.strip() in CODIGOS_TESTE:
        return jsonify({"replies": [{"message": "üîì Gerando seu login de teste, s√≥ um instante..."}]})

    # Planos e pagamento
    if any(k in m for k in KEY_PAG):
        return jsonify({"replies": [{"message": MSG_VALORES}, {"message": MSG_PAGAMENTO}, {"message": MSG_PIX_SOZINHO}]})

    # ======== FALLBACK COM IA ========
    prompt = (
        "Voc√™ √© atendente de IPTV no WhatsApp. Responda curto e objetivo.\n"
        "Android: destacar **Xtream IPTV Player** (recomendado) e listar **9Xtream**, **XCIPTV**, **IPTV Stream Player** como alternativas.\n"
        "S√≥ oferecer o link **http://xwkhb.info/axc** quando o cliente n√£o conseguir/n√£o quiser instalar pelas lojas/alternativas; "
        "explique navegador/Downloader/NTDOWN. Philips = Android.\n"
        "Para TVs com app: **Xcloud (√≠cone verde e preto)**; alternativas: OTT Player, Duplecast, SmartOne.\n"
        "Foto/QR/MAC: perguntar qual app est√° usando. Teste gratuito sempre 3 horas.\n\n"
        f"Hist√≥rico recente:\n{contexto}\n\n"
        f"Mensagem do cliente: '{mensagem}'\n"
        "Responda seguindo as regras."
    )
    try:
        result = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5
        )
        texto = result.choices[0].message.content.strip()
        return jsonify({"replies": [{"message": texto}]})
    except Exception as e:
        return jsonify({"replies": [{"message": f"‚ö†Ô∏è Erro ao gerar resposta: {str(e)}"}]})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
