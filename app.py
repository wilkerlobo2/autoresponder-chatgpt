from flask import Flask, request, jsonify
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ===================== MENSAGENS FIXAS / CONSTANTES =====================

MSG_BEM_VINDO = (
    "Ol√°! üëã Seja bem-vindo! Aqui voc√™ tem acesso a *canais de TV, filmes e s√©ries*. üì∫üçø\n"
    "Vamos come√ßar seu teste gratuito?\n\n"
    "Me diga qual aparelho voc√™ quer usar (ex: TV LG, Roku, Celular, Computador...)."
)

MSG_ANDROID = (
    "Para Android, baixe o app **Xtream IPTV Player** üì∫üëáüì≤ *(recomendado)*.\n"
    "Tamb√©m pode usar: *9Xtream*, *XCIPTV* ou *Vu IPTV Player*.\n"
    "Me avise quando instalar para eu enviar seu login."
)

MSG_ANDROID_LINK = (
    "üîî **A√á√ÉO MANUAL NECESS√ÅRIA**: cliente precisa de link alternativo.\n"
    "N√£o tem problema! Voc√™ consegue baixar por link (Chrome/Downloader/NTDOWN)?\n"
    "Use este link: http://xwkhb.info/axc\n"
    "Assim que abrir o app, me avise para eu enviar seu login. ‚è≥"
)

MSG_XCLOUD = (
    "Para sua TV, use o **Xcloud (√≠cone verde e preto)** üì∫üü©‚¨õ *(preferencial)*.\n"
    "Se preferir, tamb√©m d√° para usar: *OTT Player*, *Duplecast* ou *SmartOne*.\n"
    "Instale e me avise para eu enviar seu login. O teste gratuito dura **3 horas**. ‚è±Ô∏è"
)

MSG_PC = (
    "Para PC/Windows, baixe o app por este link:\n"
    "https://7aps.online/iptvsmarters\n\n"
    "Depois me avise quando abrir o link para que eu possa enviar o seu login. ‚ò∫Ô∏è"
)

MSG_POS_LOGIN_OK = "Perfeito! Aproveite seu teste. üòä"

MSG_POS_LOGIN_FALHOU = (
    "Vamos resolver isso! Verifique se digitou *exatamente* como enviado.\n"
    "Aten√ß√£o √†s *letras mai√∫sculas e min√∫sculas* e aos caracteres parecidos (*I* vs *l*, *O* vs *0*).\n"
    "Pode me enviar uma *foto da tela* mostrando como voc√™ est√° digitando? üì∑"
)

MSG_FOTO_QUAL_APP = (
    "Entendi a foto/QR/MAC! Como n√£o consigo identificar imagens aqui, me diga por favor **qual aplicativo** voc√™ est√° usando:\n"
    "*Duplecast*, *SmartOne*, *OTT Player*, *Xcloud (√≠cone verde e preto)*, *Xtream IPTV Player*, *9Xtream*, *XCIPTV* ou *Vu IPTV Player*? üòâ"
)

MSG_DUBLECAST_PASSO = (
    "Certo! No *Duplecast*, siga:\n"
    "Start ‚ûú Portugu√™s ‚ûú Brasil ‚ûú Fuso hor√°rio *-03* ‚ûú *Minha duplecast*.\n"
    "Depois, envie uma *foto do QR code* de perto. Em seguida, digite **871** aqui na conversa para eu gerar o teste (link M3U)."
)

MSG_DUBLECAST_JA_TEM = (
    "Perfeito! Se voc√™ *j√° tem* o Duplecast, envie uma *foto do QR code* de perto e depois digite **871** aqui na conversa."
)

MSG_SMARTONE = (
    "No *SmartOne*, me envie o **MAC** (ou uma *foto da tela com o MAC*). Depois disso, digite **871** aqui para eu gerar o teste."
)

MSG_OTTPLAYER = (
    "No *OTT Player*, me envie uma *foto do QR code* de perto. Em seguida, digite **871** aqui para eu gerar o teste."
)

MSG_VALORES = (
    "üí∞ *Planos dispon√≠veis*:\n"
    "1 m√™s ‚Äì R$ 26,00 | 2 meses ‚Äì R$ 47,00 | 3 meses ‚Äì R$ 68,00 | 6 meses ‚Äì R$ 129,00 | 1 ano ‚Äì R$ 185,00"
)

MSG_PAGAMENTO = (
    "üí≥ *Formas de pagamento*: Pix ou Cart√£o.\n"
    "Cart√£o (link seguro): https://mpago.la/2Nsh3Fq\n"
    "Vou te mandar o *Pix (CNPJ)* em uma mensagem separada para facilitar a c√≥pia."
)

MSG_PIX_SOZINHO = "Pix (CNPJ): 46.370.366/0001-97"

MSG_AUDIO = (
    "Ops! üòÖ Por aqui eu n√£o consigo interpretar *√°udios*. Pode me mandar por *texto*? Eu continuo te ajudando normalmente!"
)

MSG_ATENCAO_MANUAL = "üîî **A√á√ÉO MANUAL NECESS√ÅRIA**: analisar e enviar login/dados quando o cliente confirmar."

# Palavras-chave/agrupamentos
CODIGOS_TESTE = {"224", "555", "91", "88", "871", "98", "94"}
KEY_OK = {"deu certo", "acessou", "funcionou", "sim", "consegui", "tudo certo", "abriu", "logou"}
KEY_NOK = {"n√£o", "nao", "n consegui", "n√£o funcionou", "nao funcionou", "n deu certo", "nao deu certo", "n√£o deu certo"}
KEY_FOTO = {"foto", "qrcode", "qr code", "qr-code", "qr", "mac:", "endere√ßo mac", "endereco mac", "mostrei a tela"}
KEY_ANDROID = {"android", "tv box", "projetor", "celular android", "celular", "philips"}
KEY_XCLOUD_DEVICES = {"samsung", "lg", "roku", "philco nova", "xcloud"}
KEY_PC = {"pc", "computador", "notebook", "windows", "macbook"}
KEY_LINK_ALT = {
    "n√£o consigo baixar", "nao consigo baixar", "n√£o acho na loja", "nao acho na loja",
    "n√£o encontra na loja", "nao encontra na loja", "n√£o tem na loja", "nao tem na loja",
    "tem link", "manda o link", "baixar por link", "link alternativo", "apk", "aptoide", "ntdown", "downloader"
}
KEY_PAG = {"pix", "pagamento", "valor", "quanto", "plano", "planos", "pre√ßo", "preco"}

# Hist√≥rico por n√∫mero
historico_conversas = {}


# ===================== APP =====================

@app.route("/", methods=["POST"])
def responder():
    data = request.get_json()
    query = data.get("query", {})
    numero = query.get("sender", "").strip()
    mensagem = query.get("message", "").strip()
    mensagem_lc = mensagem.lower()
    resposta = []

    if not numero or not mensagem:
        return jsonify({"replies": [{"message": "‚ö†Ô∏è Mensagem inv√°lida recebida."}]})

    # Boas-vindas fixas
    if numero not in historico_conversas:
        historico_conversas[numero] = []
        return jsonify({"replies": [{"message": MSG_BEM_VINDO}]})

    # Guarda no hist√≥rico (somente √∫ltima parte em min√∫sculas para regras)
    historico_conversas[numero].append(f"Cliente: {mensagem_lc}")
    contexto = "\n".join(historico_conversas[numero][-15:])

    # --- P√≥s-login: confirmou que funcionou
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in mensagem_lc for k in KEY_OK):
        return jsonify({"replies": [{"message": MSG_POS_LOGIN_OK}]})

    # --- P√≥s-login: disse que N√ÉO conseguiu
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in mensagem_lc for k in KEY_NOK):
        return jsonify({"replies": [{"message": MSG_POS_LOGIN_FALHOU}]})

    # --- Foto/QR/MAC: perguntar qual app
    if any(k in mensagem_lc for k in KEY_FOTO):
        return jsonify({"replies": [{"message": MSG_FOTO_QUAL_APP}]})

    # --- √Åudio
    if "√°udio" in mensagem_lc or "audio" in mensagem_lc:
        return jsonify({"replies": [{"message": MSG_AUDIO}]})

    # ===================== RESPOSTAS DETERMIN√çSTICAS =====================

    # Android (inclui Philips) ‚Äì primeiro passo SEM link
    if any(word in mensagem_lc for word in KEY_ANDROID):
        return jsonify({"replies": [{"message": MSG_ANDROID}]})

    # Se o cliente disser que n√£o consegue baixar (a√≠ sim o link alternativo)
    if any(f in mensagem_lc for f in KEY_LINK_ALT):
        return jsonify({"replies": [{"message": MSG_ANDROID_LINK}, {"message": MSG_ATENCAO_MANUAL} ]})

    # Dispositivos com Xcloud (verde e preto) ‚Äì com alternativas
    if any(word in mensagem_lc for word in KEY_XCLOUD_DEVICES):
        return jsonify({"replies": [{"message": MSG_XCLOUD}]})

    # PC / Windows
    if any(p in mensagem_lc for p in KEY_PC):
        return jsonify({"replies": [{"message": MSG_PC}]})

    # Cliente mencionou explicitamente ‚Äúduplecast / smartone / ott player‚Äù
    if "duplecast" in mensagem_lc:
        return jsonify({"replies": [{"message": MSG_DUBLECAST_PASSO}]})
    if "smartone" in mensagem_lc or "smart one" in mensagem_lc:
        return jsonify({"replies": [{"message": MSG_SMARTONE}]})
    if "ott player" in mensagem_lc or "ottplayer" in mensagem_lc:
        return jsonify({"replies": [{"message": MSG_OTTPLAYER}]})
    if "j√° tenho duplecast" in mensagem_lc or "ja tenho duplecast" in mensagem_lc:
        return jsonify({"replies": [{"message": MSG_DUBLECAST_JA_TEM}]})

    # --- Se cliente digitar um c√≥digo de teste (AutoResponder cuidar√° do login)
    if mensagem_lc.strip() in CODIGOS_TESTE:
        return jsonify({"replies": [{"message": "üîì Gerando seu login de teste, s√≥ um instante..."}]})

    # --- Planos e pagamento
    if any(k in mensagem_lc for k in KEY_PAG):
        return jsonify({"replies": [{"message": MSG_VALORES}, {"message": MSG_PAGAMENTO}, {"message": MSG_PIX_SOZINHO}]})

    # ===================== FALLBACK COM IA (casos gerais) =====================
    # IA com instru√ß√µes r√≠gidas para n√£o inventar apps
    prompt = (
        "Voc√™ √© um atendente de IPTV no WhatsApp. Responda de forma curta, objetiva e educada. "
        "Nunca recomende aplicativos fora desta lista: Xtream IPTV Player, 9Xtream, XCIPTV, Vu IPTV Player, "
        "Xcloud (√≠cone verde e preto), OTT Player, Duplecast, SmartOne, Smarters Player Lite (iOS) e IPTV Smarters para PC.\n"
        "Teste gratuito sempre **3 horas**. Se falar sobre valores, enviar planos e depois Pix em mensagem separada.\n"
        "Se o cliente enviar foto/QR/MAC, diga que n√£o identifica imagens e pergunte qual aplicativo est√° usando.\n"
        "Se pedir ajuda por link alternativo para Android, use exatamente: http://xwkhb.info/axc e a frase 'üîî A√á√ÉO MANUAL NECESS√ÅRIA'.\n"
        "Se mandar √°udio, diga que n√£o pode interpretar e pe√ßa texto.\n\n"
        f"Hist√≥rico recente:\n{contexto}\n\n"
        f"Mensagem do cliente: '{mensagem}'\n"
        "Responda agora seguindo essas regras estritas."
    )

    try:
        result = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4
        )
        texto = result.choices[0].message.content.strip()
        return jsonify({"replies": [{"message": texto}]})
    except Exception as e:
        return jsonify({"replies": [{"message": f"‚ö†Ô∏è Erro ao gerar resposta: {str(e)}"}]})

# =======================================================================

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
