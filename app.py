from flask import Flask, request, jsonify
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ========= util =========
DELAY_MS = 500  # 0.5s entre mensagens

def make_replies(blocks):
    """Converte lista de bal√µes em replies com delay de 0.5s."""
    replies = []
    for i, msg in enumerate(blocks):
        if i == 0:
            replies.append({"message": msg})
        else:
            replies.append({"message": msg, "delay": DELAY_MS})
    return replies

# ========= constantes de texto =========
MSG_BEM_VINDO = [
    "Ol√°! üëã Bem‚Äëvindo(a)!",
    "Aqui voc√™ tem acesso a *canais de TV, filmes e s√©ries*. üì∫üçø",
    "Vamos come√ßar seu *teste gratuito*?",
    "Me diga qual aparelho voc√™ quer usar (ex: TV LG, Samsung, Roku, Philips, Android, iPhone, PC‚Ä¶)."
]

# ANDROID (inclui PHILIPS) ‚Äî sem ‚Äúdetectado‚Äù
ANDROID_PREF = "‚¨áÔ∏è BAIXE *Xtream IPTV Player* (preferencial)."
ANDROID_ALT_TITLE = "‚úÖ OUTRAS OP√á√ïES (se preferir):"
ANDROID_ALT_LIST = "‚Ä¢ *9Xtream*\n‚Ä¢ *XCIPTV*\n‚Ä¢ *IPTV Stream Player*"
ANDROID_INST = "Depois de instalar, me avise pra eu enviar seu login. üòâ"
ANDROID_INSIST_1 = "N√£o achou na loja? Vamos tentar *outra op√ß√£o* da lista acima."
ANDROID_INSIST_2 = "Se ainda assim *n√£o conseguiu*, a√≠ sim tem *link direto*:"
ANDROID_LINK = "üîó http://xwkhb.info/axc\n(cole no navegador/Downloader/NTDOWN da sua TV Box/Android e o download inicia.)"
ANDROID_MANUAL = "üîî *A√á√ÉO MANUAL NECESS√ÅRIA*: cliente usar√° o link. Enviar login quando avisar."

# XCLOUD (verde e preto) ‚Äî sem ‚Äúdetectada‚Äù
XCLOUD_PREF = "Use o *Xcloud (√≠cone verde e preto)* üü©‚¨õ *(preferencial).*"
XCLOUD_TESTE = "Instale e me avise para eu enviar seu login. ‚è≥ O teste gratuito dura *3 horas*."
XCLOUD_ALT_TITLE = "Se preferir, alternativas na sua TV:"
XCLOUD_ALT_LIST = "‚Ä¢ *OTT Player*\n‚Ä¢ *Duplecast*\n‚Ä¢ *SmartOne*"
XCLOUD_ASK_APP = "Instale e me diga *qual app* escolheu pra eu te guiar certinho. üòâ"

# PC
PC_MSG = [
    "üñ•Ô∏è *PC/Windows*",
    "Baixe o app por este link:",
    "https://7aps.online/iptvsmarters",
    "Depois me avise quando abrir pra eu enviar seu login. üôÇ"
]

# iPhone / iOS
IOS_MSG = [
    "üçè *iPhone/iOS*",
    "Use o *Smarters Player Lite* (√≠cone azul, App Store).",
    "Quando instalar, me avise para eu enviar seu login. ‚è≥"
]

# P√≥s‚Äëlogin
POS_OK = ["Tudo certo! ‚úÖ", "Aproveite seu teste. üòÑ"]
POS_FAIL = [
    "Vamos resolver! ‚öôÔ∏è",
    "Verifique se digitou *exatamente* como enviado.",
    "Aten√ß√£o a *mai√∫sculas/min√∫sculas* e caracteres parecidos (*I/l*, *O/0*).",
    "Pode me enviar *foto da tela* mostrando como est√° digitando? üì∑"
]

# Imagens / QR / MAC
FOTO_ANDROID = [
    "Recebi uma *imagem*. üëÄ",
    "Como estamos no *Android*, n√£o d√° para identificar a imagem aqui.",
    "üîî *A√á√ÉO MANUAL NECESS√ÅRIA*: assim que concluir a instala√ß√£o, me avise que eu envio o login. üòâ"
]
FOTO_TV = [
    "Recebi uma *imagem*. üëÄ",
    "Como n√£o identifico imagem aqui, me diga *qual aplicativo* voc√™ est√° usando:",
    "*Duplecast*, *SmartOne*, *OTT Player* ou *Xcloud (√≠cone verde e preto)*?"
]

# Fluxos espec√≠ficos
DUPLECAST_STEPS = [
    "üì≤ *Duplecast*",
    "Siga: *Start ‚Üí Portugu√™s ‚Üí Brasil ‚Üí Fuso -03 ‚Üí Minha duplecast*.",
    "Depois me envie *foto do QR* de perto. üëç",
    "Em seguida, digite **871** aqui na conversa (vou gerar seu teste *M3U*)."
]
DUPLECAST_HAVE = [
    "Perfeito! üëç",
    "Se voc√™ *j√° tem* o Duplecast, envie *foto do QR* de perto e depois digite **871**."
]
SMARTONE_STEPS = [
    "üß† *SmartOne*",
    "Me envie o *MAC* (ou *foto da tela com o MAC*).",
    "Depois disso, digite **871** pra eu gerar seu teste."
]
OTT_STEPS = [
    "üéõÔ∏è *OTT Player*",
    "Me envie *foto do QR* de perto.",
    "Depois, digite **871** pra eu gerar seu teste."
]

# Planos / pagamento
PLANOS = [
    "üí∞ *Planos*",
    "1 m√™s ‚Äì R$ 26,00 | 2 meses ‚Äì R$ 47,00 | 3 meses ‚Äì R$ 68,00 | 6 meses ‚Äì R$ 129,00 | 1 ano ‚Äì R$ 185,00"
]
PAGAMENTO = [
    "üí≥ *Pagamento*",
    "Pix ou Cart√£o (link seguro): https://mpago.la/2Nsh3Fq",
    "Vou mandar o *Pix (CNPJ)* *separado* pra facilitar a c√≥pia."
]
PIX_SOLO = ["Pix (CNPJ): *46.370.366/0001-97*"]

# Palavras‚Äëchave e contexto
CODIGOS_TESTE = {"224", "555", "91", "88", "871", "98", "94"}
KEY_OK = {"deu certo","acessou","funcionou","sim","consegui","tudo certo","abriu","logou"}
KEY_NOK = {"n√£o","nao","n consegui","n√£o funcionou","nao funcionou","n deu certo","nao deu certo","n√£o deu certo"}
KEY_FOTO = {"foto","imagem","print","qrcode","qr code","qr-code","qr","mac:" ,"endere√ßo mac","endereco mac","mostrei a tela"}
KEY_ANDROID = {"android","tv box","projetor","celular android","celular","philips"}
KEY_XCLOUD_DEVICES = {"samsung","lg","roku","philco nova","xcloud","tv samsung","tv lg","tv roku"}
KEY_PC = {"pc","computador","notebook","windows","macbook"}
KEY_IOS = {"iphone","ios","ipad"}
KEY_LINK_ALT = {
    "n√£o consigo baixar","nao consigo baixar","n√£o acho na loja","nao acho na loja",
    "n√£o encontra na loja","nao encontra na loja","n√£o tem na loja","nao tem na loja",
    "tem link","manda o link","baixar por link","link alternativo","apk","aptoide","ntdown","downloader","n√£o achei","nao achei"
}
KEY_OUTRO = {"tem outro","quero outro","outro app","tem mais algum","tem mais op√ß√µes","tem mais uma op√ß√£o","n√£o tem esse","nao tem esse"}
KEY_PAG = {"pix","pagamento","valor","quanto","plano","planos","pre√ßo","preco"}

# sess√µes (hist√≥rico + contexto)
sessions = {}  # numero -> {"msgs": [...], "ctx": None}

@app.route("/", methods=["POST"])
def responder():
    data = request.get_json()
    query = data.get("query", {})
    numero = query.get("sender","").strip()
    mensagem = query.get("message","").strip()
    m = mensagem.lower()

    if not numero or not mensagem:
        return jsonify({"replies": make_replies(["‚ö†Ô∏è Mensagem inv√°lida recebida."])})

    # cria sess√£o
    if numero not in sessions:
        sessions[numero] = {"msgs": [], "ctx": None}
        return jsonify({"replies": make_replies(MSG_BEM_VINDO)})

    s = sessions[numero]
    s["msgs"].append(f"Cliente: {m}")
    contexto = "\n".join(s["msgs"][-20:])

    # p√≥s‚Äëlogin
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_OK):
        return jsonify({"replies": make_replies(POS_OK)})
    if any(f"Cliente: {c}" in contexto for c in CODIGOS_TESTE) and any(k in m for k in KEY_NOK):
        return jsonify({"replies": make_replies(POS_FAIL)})

    # foto/qr/mac ‚Äì depende do contexto
    if any(k in m for k in KEY_FOTO):
        if s["ctx"] == "android":
            return jsonify({"replies": make_replies(FOTO_ANDROID)})
        else:
            return jsonify({"replies": make_replies(FOTO_TV)})

    # ‚Äútem outro?‚Äù
    if any(k in m for k in KEY_OUTRO):
        if s["ctx"] == "android":
            blocks = [ANDROID_ALT_TITLE, ANDROID_ALT_LIST, ANDROID_INST]
            return jsonify({"replies": make_replies(blocks)})
        if s["ctx"] == "xcloud":
            blocks = [XCLOUD_ALT_TITLE, XCLOUD_ALT_LIST, XCLOUD_ASK_APP]
            return jsonify({"replies": make_replies(blocks)})
        return jsonify({"replies": make_replies(
            ["Me diga o aparelho (Android, Samsung/LG/Roku, iPhone ou PC) que te passo as op√ß√µes certinhas. üòâ"]
        )})

    # ===== fluxos determin√≠sticos =====

    # ANDROID (inclui Philips) ‚Äî sem o bal√£o ‚Äúdetectado‚Äù
    if any(w in m for w in KEY_ANDROID):
        s["ctx"] = "android"
        blocks = [ANDROID_PREF, ANDROID_ALT_TITLE, ANDROID_ALT_LIST, ANDROID_INST]
        return jsonify({"replies": make_replies(blocks)})

    # insistiu que n√£o achou / quer link ‚Äì s√≥ Android
    if any(w in m for w in KEY_LINK_ALT):
        if s["ctx"] == "android" or "android" in m or "philips" in m or "tv box" in m or "celular" in m:
            blocks = [ANDROID_INSIST_1, ANDROID_INSIST_2, ANDROID_LINK, ANDROID_MANUAL]
            return jsonify({"replies": make_replies(blocks)})
        else:
            return jsonify({"replies": make_replies(
                ["O link √© para *Android*. Seu aparelho √© Android? Se for, te passo agora o passo a passo. üòâ"]
            )})

    # TVs que usam Xcloud ‚Äî sem o bal√£o ‚Äúdetectada‚Äù
    if any(w in m for w in KEY_XCLOUD_DEVICES):
        s["ctx"] = "xcloud"
        blocks = [XCLOUD_PREF, XCLOUD_TESTE, XCLOUD_ALT_TITLE, XCLOUD_ALT_LIST, XCLOUD_ASK_APP]
        return jsonify({"replies": make_replies(blocks)})

    # PC
    if any(w in m for w in KEY_PC):
        s["ctx"] = "pc"
        return jsonify({"replies": make_replies(PC_MSG)})

    # iOS
    if any(w in m for w in KEY_IOS):
        s["ctx"] = "ios"
        return jsonify({"replies": make_replies(IOS_MSG)})

    # apps espec√≠ficos
    if "duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": make_replies(DUPLECAST_STEPS)})
    if "j√° tenho duplecast" in m or "ja tenho duplecast" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": make_replies(DUPLECAST_HAVE)})
    if "smartone" in m or "smart one" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": make_replies(SMARTONE_STEPS)})
    if "ott player" in m or "ottplayer" in m:
        s["ctx"] = "xcloud"
        return jsonify({"replies": make_replies(OTT_STEPS)})

    # cliente digitou um dos c√≥digos
    if m.strip() in CODIGOS_TESTE:
        return jsonify({"replies": make_replies(["üîì Gerando seu login de teste, s√≥ um instante..."])})

    # planos/pagamento/pix
    if any(k in m for k in KEY_PAG):
        replies = make_replies(PLANOS) + make_replies(PAGAMENTO) + make_replies(PIX_SOLO)
        return jsonify({"replies": replies})

    # ===== fallback com IA =====
    prompt = (
        "Voc√™ √© um atendente de IPTV no WhatsApp. Responda curto, objetivo e com emojis.\n"
        "Nunca recomende apps fora desta lista: Xtream IPTV Player, 9Xtream, XCIPTV, IPTV Stream Player, "
        "Xcloud (√≠cone verde e preto), OTT Player, Duplecast, SmartOne, Smarters Player Lite (iOS) e IPTV Smarters para PC.\n"
        "Android: √™nfase no Xtream IPTV Player; s√≥ oferecer link http://xwkhb.info/axc se o cliente disser que n√£o conseguiu/achou.\n"
        "Philips = Android. Samsung/LG/Roku usam Xcloud (verde e preto) com alternativas (OTT/Duplecast/SmartOne).\n"
        "Se mandar foto/QR/MAC: se contexto Android -> 'A√ß√£o Manual Necess√°ria'; sen√£o, pergunte qual app est√° usando.\n"
        "Teste sempre *3 horas*. Pix deve ir em mensagem separada se pedir pagamento.\n\n"
        f"Hist√≥rico recente:\n{contexto}\n\n"
        f"Mensagem: '{mensagem}'\n"
        "Responda em 1‚Äì2 frases."
    )
    try:
        result = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role":"user","content":prompt}],
            temperature=0.4
        )
        texto = result.choices[0].message.content.strip()
        return jsonify({"replies": make_replies([texto])})
    except Exception as e:
        return jsonify({"replies": make_replies([f"‚ö†Ô∏è Erro ao gerar resposta: {str(e)}"])})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
