from flask import Flask, request, jsonify
from openai import OpenAI
import os

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
historico_conversas = {}

@app.route("/", methods=["POST"])
def responder():
    data = request.get_json()
    query = data.get("query", {})
    numero = query.get("sender", "").strip()
    mensagem = query.get("message", "").strip().lower()
    resposta = []

    if not numero or not mensagem:
        return jsonify({"replies": [{"message": "‚ö†Ô∏è Mensagem inv√°lida recebida."}]})

    # Mensagem de boas-vindas fixa
    if numero not in historico_conversas:
        historico_conversas[numero] = []
        boas_vindas = (
            "Ol√°! üëã Seja bem-vindo! Aqui voc√™ tem acesso a *canais de TV, filmes e s√©ries*. üì∫üçø\n"
            "Vamos come√ßar seu teste gratuito?\n\n"
            "Me diga qual aparelho voc√™ quer usar (ex: TV LG, Roku, Celular, Computador...)."
        )
        return jsonify({"replies": [{"message": boas_vindas}]})

    historico_conversas[numero].append(f"Cliente: {mensagem}")
    contexto = "\n".join(historico_conversas[numero][-15:])

    # Regra especial para PC
    if any(p in mensagem for p in ["pc", "computador", "notebook", "windows", "macbook"]):
        texto_pc = (
            "Para PC, voc√™ precisa baixar o app usando o link:\n"
            "https://7aps.online/iptvsmarters\n\n"
            "Depois me avise quando abrir o link para que eu possa enviar o seu login. ‚ò∫Ô∏è"
        )
        historico_conversas[numero].append(f"IA: {texto_pc}")
        return jsonify({"replies": [{"message": texto_pc}]})

    # Detectar confirma√ß√£o de instala√ß√£o
    if any(p in mensagem for p in ["instalei", "baixei", "pronto", "feito", "j√° instalei", "ja instalei", "acessado", "abri"]):
        ultimas = [m for m in historico_conversas[numero][-6:] if m.startswith("Cliente:")]
        mensagem_relevante = " ".join(ultimas).lower()

        if "xcloud" in mensagem_relevante:
            codigo = "91"
        elif "samsung" in mensagem_relevante:
            codigo = "91"
        elif any(d in mensagem_relevante for d in ["tv box", "android", "xtream", "celular", "projetor"]):
            codigo = "555"
        elif any(d in mensagem_relevante for d in ["iphone", "ios"]):
            codigo = "224"
        elif any(d in mensagem_relevante for d in ["computador", "pc", "notebook", "macbook", "windows"]):
            codigo = "224"
        elif "philco antiga" in mensagem_relevante:
            codigo = "98"
        elif "tv antiga" in mensagem_relevante or "smart stb" in mensagem_relevante:
            codigo = "88"
        else:
            codigo = "91"

        texto = f"Digite **{codigo}** aqui na conversa para receber seu login. ‚ò∫Ô∏è"
        historico_conversas[numero].append(f"IA: {texto}")
        resposta.append({"message": texto})
        return jsonify({"replies": resposta})

    # Gatilho do teste
    if mensagem.strip() in ["224", "555", "91", "88", "98"]:
        resposta.append({"message": "üîì Gerando seu login de teste, s√≥ um instante..."})
        return jsonify({"replies": resposta})

    # Prompt para a IA
    prompt = (
        "Voc√™ √© um atendente de IPTV via WhatsApp. Seja direto, simples e educado como uma linha de produ√ß√£o. "
        "Use emojis criativos sempre que indicar um aplicativo. N√ÉO envie links de IPTV ou imagens.\n\n"
        "üïí Informe sempre que o teste gratuito dura *3 horas* ‚Äî e n√£o 24 horas.\n"
        "Se o cliente perguntar sobre valores ou pre√ßos, envie os planos:\n"
        "üí∞ Planos dispon√≠veis:\n"
        "1 m√™s ‚Äì R$ 26,00\n"
        "2 meses ‚Äì R$ 47,00\n"
        "3 meses ‚Äì R$ 68,00\n"
        "6 meses ‚Äì R$ 129,00\n"
        "1 ano ‚Äì R$ 185,00\n\n"
        "üí≥ Formas de pagamento:\n"
        "Pix (envie o CNPJ sozinho na pr√≥xima mensagem para facilitar c√≥pia): 46.370.366/0001-97\n"
        "Cart√£o: https://mpago.la/2Nsh3Fq\n\n"
        "‚ö†Ô∏è Envie o Pix (CNPJ) sempre separado para facilitar a c√≥pia.\n\n"
        "Quando o cliente disser o aparelho (ex: TV LG, Roku, iPhone, Computador), diga QUAL app ele deve baixar e diga:\n"
        "'Baixe o app [NOME] üì∫üëáüì≤ para [DISPOSITIVO]! Me avise quando instalar para que eu envie o seu login.'\n\n"
        "Se for Samsung, sempre diga que o app √© o Xcloud.\n"
        "Se for LG, Roku ou Philco nova, tamb√©m use o app Xcloud.\n"
        "Se for Android, TV Box, projetor ou celular Android: Xtream IPTV Player.\n"
        "Se o cliente perguntar por outros apps Android, indique tamb√©m 9xtream, XCIPTV ou Vu IPTV Player.\n"
        "Se for iPhone ou iOS: diga que √© o app Smarters Player Lite (da App Store, √≠cone azul).\n"
        "Se for computador, PC, notebook ou sistema Windows:\n"
        "1Ô∏è‚É£ Diga: 'Para PC, voc√™ precisa baixar o app usando o link:'\n"
        "2Ô∏è‚É£ Envie o link sozinho: https://7aps.online/iptvsmarters\n"
        "3Ô∏è‚É£ Depois diga: 'Depois me avise quando abrir o link para que eu possa enviar o seu login.'\n"
        "‚ö†Ô∏è N√ÉO diga que n√£o precisa instalar app. O link √© para *baixar o app para PC*.\n"
        "‚ö†Ô∏è S√≥ diga para digitar *224* DEPOIS que o cliente disser que abriu ou instalou.\n\n"
        f"Hist√≥rico da conversa:\n{contexto}\n\nMensagem mais recente: '{mensagem}'\n\nResponda:"
    )

    try:
        resposta_ia = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6
        )
        texto = resposta_ia.choices[0].message.content.strip()
        historico_conversas[numero].append(f"IA: {texto}")
        resposta.append({"message": texto})

        # Verifica se deve mandar o Pix separado
        if "pix" in mensagem or "pagamento" in mensagem or "valor" in mensagem or "quanto" in mensagem or "plano" in mensagem:
            resposta.append({"message": "Pix (CNPJ): 46.370.366/0001-97"})

    except Exception as e:
        resposta.append({"message": f"‚ö†Ô∏è Erro ao gerar resposta: {str(e)}"})

    return jsonify({"replies": resposta})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
